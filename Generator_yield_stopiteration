#Using generator instead of list
#yield is one of the features of generator
#"yield" keyword made the generator
#with each " print(next(my_nums))" , the program shows only one of the computed squared numbers.
#using extra print can show, an error message about stopiteration.
#stopiteration means the function is out of values.


def square_numbers(nums):
    for i in nums:
        yield(i*i)

my_nums=square_numbers([11,12,13,14,15])

#it does not show [121,144,169,196,225,256]
print(my_nums)

print("\n#####################################################")
print("We use one next to see first result")

print(next(my_nums))
print("\n#####################################################")

print("We repeat four more times to show the next four numbers")

print(next(my_nums))
print(next(my_nums))
print(next(my_nums))
print(next(my_nums))


print("#####################################################")
print("using extra print can show, an error message about stopiteration.")
print(next(my_nums))


